import XCTest
@testable import Tuner

class TextExtensionTests: XCTestCase {
    
    // MARK: - Character.isJapanese Tests
    
    func testIsJapanese_Hiragana() {
        // Basic hiragana characters
        XCTAssertTrue("„ÅÇ".first!.isJapanese)
        XCTAssertTrue("„Åã".first!.isJapanese)
        XCTAssertTrue("„Åï".first!.isJapanese)
        XCTAssertTrue("„Åü".first!.isJapanese)
        XCTAssertTrue("„Å™".first!.isJapanese)
        XCTAssertTrue("„ÅØ".first!.isJapanese)
        XCTAssertTrue("„Åæ".first!.isJapanese)
        XCTAssertTrue("„ÇÑ".first!.isJapanese)
        XCTAssertTrue("„Çâ".first!.isJapanese)
        XCTAssertTrue("„Çè".first!.isJapanese)
        XCTAssertTrue("„Çì".first!.isJapanese)
        
        // Small hiragana characters
        XCTAssertTrue("„ÅÅ".first!.isJapanese)
        XCTAssertTrue("„ÅÉ".first!.isJapanese)
        XCTAssertTrue("„ÅÖ".first!.isJapanese)
        XCTAssertTrue("„Åá".first!.isJapanese)
        XCTAssertTrue("„Åâ".first!.isJapanese)
        XCTAssertTrue("„Å£".first!.isJapanese)
        XCTAssertTrue("„ÇÉ".first!.isJapanese)
        XCTAssertTrue("„ÇÖ".first!.isJapanese)
        XCTAssertTrue("„Çá".first!.isJapanese)
        
        // Boundary cases - range start and end
        XCTAssertTrue("„ÅÅ".first!.isJapanese) // U+3041 - range start
        XCTAssertTrue("„Çñ".first!.isJapanese) // U+3096 - range end
    }
    
    func testIsJapanese_Katakana() {
        // Basic katakana characters
        XCTAssertTrue("„Ç¢".first!.isJapanese)
        XCTAssertTrue("„Ç´".first!.isJapanese)
        XCTAssertTrue("„Çµ".first!.isJapanese)
        XCTAssertTrue("„Çø".first!.isJapanese)
        XCTAssertTrue("„Éä".first!.isJapanese)
        XCTAssertTrue("„Éè".first!.isJapanese)
        XCTAssertTrue("„Éû".first!.isJapanese)
        XCTAssertTrue("„É§".first!.isJapanese)
        XCTAssertTrue("„É©".first!.isJapanese)
        XCTAssertTrue("„ÉØ".first!.isJapanese)
        XCTAssertTrue("„É≥".first!.isJapanese)
        
        // Small katakana characters
        XCTAssertTrue("„Ç°".first!.isJapanese)
        XCTAssertTrue("„Ç£".first!.isJapanese)
        XCTAssertTrue("„Ç•".first!.isJapanese)
        XCTAssertTrue("„Çß".first!.isJapanese)
        XCTAssertTrue("„Ç©".first!.isJapanese)
        XCTAssertTrue("„ÉÉ".first!.isJapanese)
        XCTAssertTrue("„É£".first!.isJapanese)
        XCTAssertTrue("„É•".first!.isJapanese)
        XCTAssertTrue("„Éß".first!.isJapanese)
        
        // Extended katakana
        XCTAssertTrue("„É¥".first!.isJapanese)
        XCTAssertTrue("„Éµ".first!.isJapanese)
        XCTAssertTrue("„É∂".first!.isJapanese)
        
        // Boundary cases
        XCTAssertTrue("„Ç°".first!.isJapanese) // U+30A1 - range start
        XCTAssertTrue("„É∫".first!.isJapanese) // U+30FA - range end
    }
    
    func testIsJapanese_Kanji() {
        // Common kanji characters
        XCTAssertTrue("Êó•".first!.isJapanese)
        XCTAssertTrue("Êú¨".first!.isJapanese)
        XCTAssertTrue("Ë™û".first!.isJapanese)
        XCTAssertTrue("Êñá".first!.isJapanese)
        XCTAssertTrue("Â≠ó".first!.isJapanese)
        XCTAssertTrue("Â≠¶".first!.isJapanese)
        XCTAssertTrue("Ê†°".first!.isJapanese)
        XCTAssertTrue("‰ºö".first!.isJapanese)
        XCTAssertTrue("Á§æ".first!.isJapanese)
        XCTAssertTrue("‰∫∫".first!.isJapanese)
        
        // Complex kanji
        XCTAssertTrue("È∫ª".first!.isJapanese)
        XCTAssertTrue("È¨±".first!.isJapanese)
        XCTAssertTrue("Ëñî".first!.isJapanese)
        XCTAssertTrue("Ëñá".first!.isJapanese)
        
        // Boundary cases
        XCTAssertTrue("‰∏Ä".first!.isJapanese) // U+4E00 - range start
        XCTAssertTrue("ÈæØ".first!.isJapanese) // U+9FEF - range end
    }
    
    func testIsJapanese_NonJapanese() {
        // English characters
        XCTAssertFalse("a".first!.isJapanese)
        XCTAssertFalse("Z".first!.isJapanese)
        XCTAssertFalse("m".first!.isJapanese)
        
        // Numbers
        XCTAssertFalse("0".first!.isJapanese)
        XCTAssertFalse("5".first!.isJapanese)
        XCTAssertFalse("9".first!.isJapanese)
        
        // Symbols
        XCTAssertFalse("!".first!.isJapanese)
        XCTAssertFalse("@".first!.isJapanese)
        XCTAssertFalse("#".first!.isJapanese)
        XCTAssertFalse("$".first!.isJapanese)
        XCTAssertFalse("%".first!.isJapanese)
        
        // Spaces and punctuation
        XCTAssertFalse(" ".first!.isJapanese)
        XCTAssertFalse(".".first!.isJapanese)
        XCTAssertFalse(",".first!.isJapanese)
        XCTAssertFalse("?".first!.isJapanese)
        
        // Korean characters (Hangul)
        XCTAssertFalse("Ìïú".first!.isJapanese)
        XCTAssertFalse("Í∏Ä".first!.isJapanese)
        
        // Chinese characters outside the kanji range
        // Note: Many Chinese characters overlap with kanji, so this is limited
        
        // Emoji
        XCTAssertFalse("üòÄ".first!.isJapanese)
        XCTAssertFalse("üéå".first!.isJapanese)
    }
    
    // MARK: - Character.isEnglish Tests
    
    func testIsEnglish_Lowercase() {
        // Test all lowercase letters
        for char in "abcdefghijklmnopqrstuvwxyz" {
            XCTAssertTrue(char.isEnglish, "Character '\(char)' should be English")
        }
        
        // Boundary cases
        XCTAssertTrue("a".first!.isEnglish) // Range start
        XCTAssertTrue("z".first!.isEnglish) // Range end
    }
    
    func testIsEnglish_Uppercase() {
        // Test all uppercase letters
        for char in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" {
            XCTAssertTrue(char.isEnglish, "Character '\(char)' should be English")
        }
        
        // Boundary cases
        XCTAssertTrue("A".first!.isEnglish) // Range start
        XCTAssertTrue("Z".first!.isEnglish) // Range end
    }
    
    func testIsEnglish_NonEnglish() {
        // Numbers
        for char in "0123456789" {
            XCTAssertFalse(char.isEnglish, "Character '\(char)' should not be English")
        }
        
        // Symbols
        for char in "!@#$%^&*()_+-=[]{}|;':\",./<>?" {
            XCTAssertFalse(char.isEnglish, "Character '\(char)' should not be English")
        }
        
        // Spaces
        XCTAssertFalse(" ".first!.isEnglish)
        XCTAssertFalse("\t".first!.isEnglish)
        XCTAssertFalse("\n".first!.isEnglish)
        
        // Japanese characters
        XCTAssertFalse("„ÅÇ".first!.isEnglish)
        XCTAssertFalse("„Ç¢".first!.isEnglish)
        XCTAssertFalse("Êó•".first!.isEnglish)
        
        // Accented characters (not in basic English range)
        XCTAssertFalse("√°".first!.isEnglish)
        XCTAssertFalse("√©".first!.isEnglish)
        XCTAssertFalse("√±".first!.isEnglish)
        XCTAssertFalse("√º".first!.isEnglish)
        
        // Emoji
        XCTAssertFalse("üòÄ".first!.isEnglish)
    }
    
    // MARK: - Character.isNumber Tests
    
    func testIsNumber_ValidNumbers() {
        // Test all digits
        for char in "0123456789" {
            XCTAssertTrue(char.isNumber, "Character '\(char)' should be a number")
        }
        
        // Boundary cases
        XCTAssertTrue("0".first!.isNumber) // Range start
        XCTAssertTrue("9".first!.isNumber) // Range end
    }
    
    func testIsNumber_NonNumbers() {
        // Letters
        for char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" {
            XCTAssertFalse(char.isNumber, "Character '\(char)' should not be a number")
        }
        
        // Symbols
        for char in "!@#$%^&*()_+-=[]{}|;':\",./<>?" {
            XCTAssertFalse(char.isNumber, "Character '\(char)' should not be a number")
        }
        
        // Spaces
        XCTAssertFalse(" ".first!.isNumber)
        XCTAssertFalse("\t".first!.isNumber)
        
        // Japanese numbers (different from ASCII digits)
        XCTAssertFalse("Ôºë".first!.isNumber) // Full-width 1
        XCTAssertFalse("Ôºí".first!.isNumber) // Full-width 2
        XCTAssertFalse("‰∏Ä".first!.isNumber) // Kanji 1
        XCTAssertFalse("‰∫å".first!.isNumber) // Kanji 2
        
        // Decimal point and negative sign
        XCTAssertFalse(".".first!.isNumber)
        XCTAssertFalse("-".first!.isNumber)
        XCTAssertFalse("+".first!.isNumber)
        
        // Emoji numbers
        XCTAssertFalse("1Ô∏è‚É£".first!.isNumber)
    }
    
    // MARK: - String.UTF16View.isSymbolOrNumber Tests
    
    func testIsSymbolOrNumber_Numbers() {
        // Single digits
        XCTAssertTrue("0".utf16.isSymbolOrNumber)
        XCTAssertTrue("1".utf16.isSymbolOrNumber)
        XCTAssertTrue("5".utf16.isSymbolOrNumber)
        XCTAssertTrue("9".utf16.isSymbolOrNumber)
        
        // Multiple digits
        XCTAssertTrue("123".utf16.isSymbolOrNumber)
        XCTAssertTrue("456789".utf16.isSymbolOrNumber)
        XCTAssertTrue("0000".utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_Symbols_Range1() {
        // Symbols from 0x0021 to 0x002F ('!' to '/')
        let symbols1 = "!\"#$%&'()*+,-./"
        for char in symbols1 {
            XCTAssertTrue(String(char).utf16.isSymbolOrNumber, "Character '\(char)' should be symbol or number")
        }
        
        // Test the whole range together
        XCTAssertTrue(symbols1.utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_Symbols_Range2() {
        // Symbols from 0x003A to 0x0040 (':' to '@')
        let symbols2 = ":;<=>?@"
        for char in symbols2 {
            XCTAssertTrue(String(char).utf16.isSymbolOrNumber, "Character '\(char)' should be symbol or number")
        }
        
        // Test the whole range together
        XCTAssertTrue(symbols2.utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_Symbols_Range3() {
        // Symbols from 0x005B to 0x0060 ('[' to '`')
        let symbols3 = "[\\]^_`"
        for char in symbols3 {
            XCTAssertTrue(String(char).utf16.isSymbolOrNumber, "Character '\(char)' should be symbol or number")
        }
        
        // Test the whole range together
        XCTAssertTrue(symbols3.utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_Symbols_Range4() {
        // Symbols from 0x007B to 0x007E ('{' to '~')
        let symbols4 = "{|}~"
        for char in symbols4 {
            XCTAssertTrue(String(char).utf16.isSymbolOrNumber, "Character '\(char)' should be symbol or number")
        }
        
        // Test the whole range together
        XCTAssertTrue(symbols4.utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_Mixed() {
        // Mixed numbers and symbols
        XCTAssertTrue("123!@#".utf16.isSymbolOrNumber)
        XCTAssertTrue("$%^456".utf16.isSymbolOrNumber)
        XCTAssertTrue("789&*()".utf16.isSymbolOrNumber)
        XCTAssertTrue("+-=[]{}|;':\",./<>?".utf16.isSymbolOrNumber)
        XCTAssertTrue("0123456789!@#$%^&*()".utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_NotSymbolOrNumber() {
        // English letters
        XCTAssertFalse("a".utf16.isSymbolOrNumber)
        XCTAssertFalse("Z".utf16.isSymbolOrNumber)
        XCTAssertFalse("Hello".utf16.isSymbolOrNumber)
        XCTAssertFalse("ABC".utf16.isSymbolOrNumber)
        XCTAssertFalse("abcDEF".utf16.isSymbolOrNumber)
        
        // Japanese characters
        XCTAssertFalse("„ÅÇ".utf16.isSymbolOrNumber)
        XCTAssertFalse("„Ç¢".utf16.isSymbolOrNumber)
        XCTAssertFalse("Êó•Êú¨".utf16.isSymbolOrNumber)
        XCTAssertFalse("„Ç´„Çø„Ç´„Éä".utf16.isSymbolOrNumber)
        
        // Spaces and control characters
        XCTAssertFalse(" ".utf16.isSymbolOrNumber)
        XCTAssertFalse("\t".utf16.isSymbolOrNumber)
        XCTAssertFalse("\n".utf16.isSymbolOrNumber)
        XCTAssertFalse("\r".utf16.isSymbolOrNumber)
        
        // Unicode characters outside the defined ranges
        XCTAssertFalse("‚Ç¨".utf16.isSymbolOrNumber) // Euro symbol
        XCTAssertFalse("¬©".utf16.isSymbolOrNumber) // Copyright symbol
        XCTAssertFalse("¬Æ".utf16.isSymbolOrNumber) // Registered symbol
        XCTAssertFalse("‚Ñ¢".utf16.isSymbolOrNumber) // Trademark symbol
        
        // Emoji
        XCTAssertFalse("üòÄ".utf16.isSymbolOrNumber)
        XCTAssertFalse("üéâ".utf16.isSymbolOrNumber)
        
        // Full-width characters
        XCTAssertFalse("ÔºëÔºíÔºì".utf16.isSymbolOrNumber) // Full-width numbers
        XCTAssertFalse("ÔΩÅÔΩÇÔΩÉ".utf16.isSymbolOrNumber) // Full-width letters
    }
    
    func testIsSymbolOrNumber_MixedWithNonSymbols() {
        // Mixed with letters - should return false
        XCTAssertFalse("123a".utf16.isSymbolOrNumber)
        XCTAssertFalse("a123".utf16.isSymbolOrNumber)
        XCTAssertFalse("12a34".utf16.isSymbolOrNumber)
        XCTAssertFalse("!@#A".utf16.isSymbolOrNumber)
        XCTAssertFalse("A!@#".utf16.isSymbolOrNumber)
        
        // Mixed with spaces - should return false
        XCTAssertFalse("123 456".utf16.isSymbolOrNumber)
        XCTAssertFalse(" 123".utf16.isSymbolOrNumber)
        XCTAssertFalse("123 ".utf16.isSymbolOrNumber)
        XCTAssertFalse("!@# $%^".utf16.isSymbolOrNumber)
        
        // Mixed with Japanese - should return false
        XCTAssertFalse("123„ÅÇ".utf16.isSymbolOrNumber)
        XCTAssertFalse("!@#Êó•".utf16.isSymbolOrNumber)
        XCTAssertFalse("„ÅÇ123".utf16.isSymbolOrNumber)
    }
    
    func testIsSymbolOrNumber_EmptyString() {
        // Empty string should return true (vacuous truth)
        XCTAssertTrue("".utf16.isSymbolOrNumber)
    }
    
    // MARK: - Edge Cases and Boundary Tests
    
    func testCharacterBoundaries() {
        // Test characters just outside the defined ranges
        
        // Just before hiragana range
        let beforeHiragana = Character(UnicodeScalar(0x3040)!) // Just before "„ÅÅ"
        XCTAssertFalse(beforeHiragana.isJapanese)
        
        // Just after hiragana range
        let afterHiragana = Character(UnicodeScalar(0x3097)!) // Just after "„Çñ"
        XCTAssertFalse(afterHiragana.isJapanese)
        
        // Just before katakana range
        let beforeKatakana = Character(UnicodeScalar(0x30A0)!) // Just before "„Ç°"
        XCTAssertFalse(beforeKatakana.isJapanese)
        
        // Just after katakana range
        let afterKatakana = Character(UnicodeScalar(0x30FB)!) // Just after "„É∫"
        XCTAssertFalse(afterKatakana.isJapanese)
        
        // Just before kanji range
        let beforeKanji = Character(UnicodeScalar(0x4DFF)!) // Just before "‰∏Ä"
        XCTAssertFalse(beforeKanji.isJapanese)
        
        // Just after kanji range
        let afterKanji = Character(UnicodeScalar(0x9FF0)!) // Just after "ÈæØ"
        XCTAssertFalse(afterKanji.isJapanese)
    }
    
    func testUTF16Boundaries() {
        // Test UTF16 values just outside the defined ranges
        
        // Just before '0' (0x002F)
        let before0 = String(Character(UnicodeScalar(0x002F)!)) // '/'
        XCTAssertTrue(before0.utf16.isSymbolOrNumber) // This is actually in range
        
        // Just after '9' (0x003A)
        let after9 = String(Character(UnicodeScalar(0x003A)!)) // ':'
        XCTAssertTrue(after9.utf16.isSymbolOrNumber) // This is actually in range
        
        // Just before '!' (0x0020)
        let beforeExclamation = String(Character(UnicodeScalar(0x0020)!)) // Space
        XCTAssertFalse(beforeExclamation.utf16.isSymbolOrNumber)
        
        // Just after '~' (0x007F)
        let afterTilde = String(Character(UnicodeScalar(0x007F)!)) // DEL character
        XCTAssertFalse(afterTilde.utf16.isSymbolOrNumber)
    }
    
    // MARK: - Performance Tests
    
    func testPerformance_CharacterClassification() {
        let testString = "„Åì„Çå„ÅØ„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇThis is a test. 123!@#$%^&*()"
        
        measure {
            for _ in 0..<1000 {
                for char in testString {
                    _ = char.isJapanese
                    _ = char.isEnglish
                    _ = char.isNumber
                }
            }
        }
    }
    
    func testPerformance_UTF16SymbolNumberCheck() {
        let testStrings = [
            "123456789",
            "!@#$%^&*()",
            "abcdefghijk",
            "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä„Åã„Åç„Åè„Åë„Åì",
            "123!@#abc",
            "Ê∑∑Âêà„ÉÜ„Çπ„Éàstring123!@#"
        ]
        
        measure {
            for _ in 0..<1000 {
                for string in testStrings {
                    _ = string.utf16.isSymbolOrNumber
                }
            }
        }
    }
}